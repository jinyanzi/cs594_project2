{
  optnet_optimize : true
  seed : 444
  generate_graph : false
  init_value : 10
  randomcrop : 4
  batchSize : 128
  epoch_step : 
    {
      1 : 60
      2 : 120
      3 : 160
    }
  randomcrop_type : "reflection"
  learningRate : 0.1
  model : "resnet-pre-act"
  save : "logs/resnet-pre-act_1197027880"
  dampening : 0
  learningRateDecayRatio : 0.2
  shortcutType : "A"
  nesterov : true
  cudnn_deterministic : false
  depth : 1001
  weightDecay : 0.0005
  multiply_input_factor : 1
  dataset : "/home/sihong/data/cifar100_whitened.t7"
  imageSize : 32
  momentum : 0.9
  optimMethod : "sgd"
  max_epoch : 200
  widen_factor : 8
  hflip : true
  dropout : 0
  learningRateDecay : 0
  nGPU : 4
  data_type : "torch.CudaTensor"
}
==> loading data	
==> configuring model	
forward output	{
  1 : FloatTensor - size: 1x100
}
backward output	{
  1 : FloatTensor - size: 1x3x32x32
}
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
  (1): cudnn.SpatialConvolution(3 -> 16, 3x3, 1,1, 1,1) without bias
  (2): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> (38) -> (39) -> (40) -> (41) -> (42) -> (43) -> (44) -> (45) -> (46) -> (47) -> (48) -> (49) -> (50) -> (51) -> (52) -> (53) -> (54) -> (55) -> (56) -> (57) -> (58) -> (59) -> (60) -> (61) -> (62) -> (63) -> (64) -> (65) -> (66) -> (67) -> (68) -> (69) -> (70) -> (71) -> (72) -> (73) -> (74) -> (75) -> (76) -> (77) -> (78) -> (79) -> (80) -> (81) -> (82) -> (83) -> (84) -> (85) -> (86) -> (87) -> (88) -> (89) -> (90) -> (91) -> (92) -> (93) -> (94) -> (95) -> (96) -> (97) -> (98) -> (99) -> (100) -> (101) -> (102) -> (103) -> (104) -> (105) -> (106) -> (107) -> (108) -> (109) -> (110) -> (111) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
          |      (1): cudnn.SpatialConvolution(16 -> 16, 1x1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.ReLU
          |      (4): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (5): cudnn.SpatialBatchNormalization
          |      (6): cudnn.ReLU
          |      (7): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Sequential {
                 [input -> (1) -> output]
                 (1): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
               }
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (5): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (6): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (7): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (8): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (9): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (10): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (11): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (12): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (13): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (14): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (15): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (16): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (17): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (18): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (19): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (20): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (21): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (22): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (23): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (24): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (25): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (26): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (27): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (28): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (29): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (30): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (31): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (32): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (33): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (34): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (35): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (36): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (37): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (38): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (39): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (40): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (41): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (42): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (43): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (44): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (45): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (46): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (47): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (48): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (49): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (50): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (51): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (52): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (53): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (54): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (55): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (56): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (57): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (58): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (59): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (60): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (61): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (62): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (63): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (64): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (65): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (66): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (67): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (68): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (69): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (70): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (71): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (72): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (73): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (74): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (75): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (76): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (77): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (78): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (79): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (80): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (81): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (82): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (83): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (84): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (85): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (86): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (87): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (88): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (89): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (90): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (91): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (92): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (93): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (94): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (95): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (96): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (97): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (98): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (99): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (100): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (101): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (102): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (103): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (104): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (105): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (106): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (107): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (108): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (109): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (110): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (111): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 16, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(16 -> 64, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (3): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> (38) -> (39) -> (40) -> (41) -> (42) -> (43) -> (44) -> (45) -> (46) -> (47) -> (48) -> (49) -> (50) -> (51) -> (52) -> (53) -> (54) -> (55) -> (56) -> (57) -> (58) -> (59) -> (60) -> (61) -> (62) -> (63) -> (64) -> (65) -> (66) -> (67) -> (68) -> (69) -> (70) -> (71) -> (72) -> (73) -> (74) -> (75) -> (76) -> (77) -> (78) -> (79) -> (80) -> (81) -> (82) -> (83) -> (84) -> (85) -> (86) -> (87) -> (88) -> (89) -> (90) -> (91) -> (92) -> (93) -> (94) -> (95) -> (96) -> (97) -> (98) -> (99) -> (100) -> (101) -> (102) -> (103) -> (104) -> (105) -> (106) -> (107) -> (108) -> (109) -> (110) -> (111) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
          |      (1): cudnn.SpatialConvolution(64 -> 32, 1x1, 2,2) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.ReLU
          |      (4): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (5): cudnn.SpatialBatchNormalization
          |      (6): cudnn.ReLU
          |      (7): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Sequential {
                 [input -> (1) -> output]
                 (1): cudnn.SpatialConvolution(64 -> 128, 1x1, 2,2) without bias
               }
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (5): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (6): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (7): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (8): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (9): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (10): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (11): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (12): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (13): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (14): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (15): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (16): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (17): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (18): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (19): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (20): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (21): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (22): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (23): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (24): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (25): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (26): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (27): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (28): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (29): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (30): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (31): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (32): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (33): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (34): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (35): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (36): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (37): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (38): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (39): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (40): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (41): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (42): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (43): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (44): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (45): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (46): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (47): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (48): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (49): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (50): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (51): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (52): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (53): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (54): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (55): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (56): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (57): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (58): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (59): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (60): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (61): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (62): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (63): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (64): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (65): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (66): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (67): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (68): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (69): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (70): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (71): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (72): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (73): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (74): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (75): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (76): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (77): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (78): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (79): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (80): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (81): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (82): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (83): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (84): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (85): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (86): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (87): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (88): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (89): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (90): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (91): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (92): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (93): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (94): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (95): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (96): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (97): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (98): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (99): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (100): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (101): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (102): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (103): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (104): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (105): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (106): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (107): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (108): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (109): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (110): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (111): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(128 -> 32, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(32 -> 128, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (4): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> (38) -> (39) -> (40) -> (41) -> (42) -> (43) -> (44) -> (45) -> (46) -> (47) -> (48) -> (49) -> (50) -> (51) -> (52) -> (53) -> (54) -> (55) -> (56) -> (57) -> (58) -> (59) -> (60) -> (61) -> (62) -> (63) -> (64) -> (65) -> (66) -> (67) -> (68) -> (69) -> (70) -> (71) -> (72) -> (73) -> (74) -> (75) -> (76) -> (77) -> (78) -> (79) -> (80) -> (81) -> (82) -> (83) -> (84) -> (85) -> (86) -> (87) -> (88) -> (89) -> (90) -> (91) -> (92) -> (93) -> (94) -> (95) -> (96) -> (97) -> (98) -> (99) -> (100) -> (101) -> (102) -> (103) -> (104) -> (105) -> (106) -> (107) -> (108) -> (109) -> (110) -> (111) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> output]
          |      (1): cudnn.SpatialConvolution(128 -> 64, 1x1, 2,2) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.ReLU
          |      (4): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (5): cudnn.SpatialBatchNormalization
          |      (6): cudnn.ReLU
          |      (7): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Sequential {
                 [input -> (1) -> output]
                 (1): cudnn.SpatialConvolution(128 -> 256, 1x1, 2,2) without bias
               }
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (5): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (6): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (7): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (8): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (9): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (10): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (11): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (12): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (13): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (14): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (15): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (16): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (17): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (18): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (19): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (20): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (21): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (22): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (23): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (24): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (25): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (26): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (27): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (28): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (29): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (30): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (31): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (32): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (33): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (34): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (35): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (36): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (37): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (38): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (39): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (40): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (41): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (42): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (43): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (44): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (45): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (46): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (47): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (48): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (49): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (50): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (51): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (52): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (53): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (54): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (55): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (56): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (57): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (58): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (59): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (60): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (61): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (62): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (63): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (64): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (65): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (66): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (67): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (68): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (69): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (70): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (71): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (72): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (73): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (74): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (75): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (76): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (77): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (78): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (79): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (80): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (81): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (82): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (83): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (84): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (85): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (86): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (87): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (88): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (89): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (90): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (91): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (92): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (93): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (94): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (95): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (96): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (97): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (98): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (99): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (100): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (101): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (102): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (103): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (104): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (105): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (106): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (107): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (108): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (109): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (110): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (111): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(256 -> 64, 1x1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (7): cudnn.SpatialBatchNormalization
          |      (8): cudnn.ReLU
          |      (9): cudnn.SpatialConvolution(64 -> 256, 1x1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (5): cudnn.SpatialBatchNormalization
  (6): cudnn.ReLU
  (7): cudnn.SpatialAveragePooling(8x8, 1,1)
  (8): nn.View(256)
  (9): nn.Linear(256 -> 100)
}
Network has	1003	convolutions	
warning: could not load nccl, falling back to default communication	
Will save at logs/resnet-pre-act_1197027880	
==> online epoch # 1 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.3544456304648,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":6.61,"init_value":10,"train_acc":3.5136217948718,"widen_factor":8,"imageSize":32,"train_time":236.02265000343,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":1,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":4.3544456304648,"randomcrop_type":"reflection","test_time":19.194550037384,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 2 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":3.7492445328297,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":16.12,"init_value":10,"train_acc":10.665064102564,"widen_factor":8,"imageSize":32,"train_time":224.78159284592,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":2,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":3.7492445328297,"randomcrop_type":"reflection","test_time":19.548094987869,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 3 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":3.1998611957599,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":26.37,"init_value":10,"train_acc":20.264423076923,"widen_factor":8,"imageSize":32,"train_time":225.89450407028,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":3,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":3.1998611957599,"randomcrop_type":"reflection","test_time":18.990640878677,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 4 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":2.7843947875194,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":30.64,"init_value":10,"train_acc":28.741987179487,"widen_factor":8,"imageSize":32,"train_time":226.93459200859,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":4,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":2.7843947875194,"randomcrop_type":"reflection","test_time":19.420286893845,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 5 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":2.4632797394043,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":38.21,"init_value":10,"train_acc":35.244391025641,"widen_factor":8,"imageSize":32,"train_time":227.02220797539,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":5,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":2.4632797394043,"randomcrop_type":"reflection","test_time":17.958782196045,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 6 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":2.2317487539389,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":36.59,"init_value":10,"train_acc":40.282451923077,"widen_factor":8,"imageSize":32,"train_time":226.30021691322,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":6,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":2.2317487539389,"randomcrop_type":"reflection","test_time":19.216827869415,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 7 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":2.0791706977746,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":40.29,"init_value":10,"train_acc":43.860176282051,"widen_factor":8,"imageSize":32,"train_time":223.60896396637,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":7,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":2.0791706977746,"randomcrop_type":"reflection","test_time":19.559291124344,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 8 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.9601343439176,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":43.09,"init_value":10,"train_acc":46.726762820513,"widen_factor":8,"imageSize":32,"train_time":220.75886511803,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":8,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.9601343439176,"randomcrop_type":"reflection","test_time":18.515191078186,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 9 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.8621413316482,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":44.89,"init_value":10,"train_acc":49.156650641026,"widen_factor":8,"imageSize":32,"train_time":219.81306600571,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":9,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.8621413316482,"randomcrop_type":"reflection","test_time":19.115202903748,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 10 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.7883165775201,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":46.81,"init_value":10,"train_acc":51.09375,"widen_factor":8,"imageSize":32,"train_time":222.71122598648,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":10,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.7883165775201,"randomcrop_type":"reflection","test_time":19.171863079071,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 11 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.734491052383,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":48.6,"init_value":10,"train_acc":52.021233974359,"widen_factor":8,"imageSize":32,"train_time":224.7338809967,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":11,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.734491052383,"randomcrop_type":"reflection","test_time":19.455873012543,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 12 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.6934612359756,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":47.72,"init_value":10,"train_acc":53.110977564103,"widen_factor":8,"imageSize":32,"train_time":223.3504550457,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":12,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.6934612359756,"randomcrop_type":"reflection","test_time":19.59251999855,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 13 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.6532208042267,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":50.1,"init_value":10,"train_acc":54.0625,"widen_factor":8,"imageSize":32,"train_time":221.66412997246,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":13,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.6532208042267,"randomcrop_type":"reflection","test_time":18.866574048996,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 14 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.6196690333195,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":51.22,"init_value":10,"train_acc":55.174278846154,"widen_factor":8,"imageSize":32,"train_time":221.08004188538,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":14,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.6196690333195,"randomcrop_type":"reflection","test_time":19.218072891235,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 15 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.5998096582217,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":40.6,"init_value":10,"train_acc":55.747195512821,"widen_factor":8,"imageSize":32,"train_time":221.2239010334,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":15,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.5998096582217,"randomcrop_type":"reflection","test_time":17.928522109985,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 16 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.5814212942735,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":41.96,"init_value":10,"train_acc":55.987580128205,"widen_factor":8,"imageSize":32,"train_time":222.4166738987,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":16,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.5814212942735,"randomcrop_type":"reflection","test_time":19.191083908081,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 17 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.5616156761463,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":40.07,"init_value":10,"train_acc":56.380208333333,"widen_factor":8,"imageSize":32,"train_time":217.94733285904,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":17,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.5616156761463,"randomcrop_type":"reflection","test_time":18.89692401886,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 18 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.5450268785159,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":40.36,"init_value":10,"train_acc":56.820913461538,"widen_factor":8,"imageSize":32,"train_time":218.41804599762,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":18,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.5450268785159,"randomcrop_type":"reflection","test_time":18.634369134903,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 19 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.5190754820139,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":27.32,"init_value":10,"train_acc":57.680288461538,"widen_factor":8,"imageSize":32,"train_time":219.20895695686,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":19,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.5190754820139,"randomcrop_type":"reflection","test_time":19.043277025223,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 20 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.5394878995724,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":34.01,"init_value":10,"train_acc":57.007211538462,"widen_factor":8,"imageSize":32,"train_time":221.94091916084,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":20,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.5394878995724,"randomcrop_type":"reflection","test_time":19.071308135986,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 21 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.5362668767954,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":20.67,"init_value":10,"train_acc":57.620192307692,"widen_factor":8,"imageSize":32,"train_time":215.60997509956,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":21,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.5362668767954,"randomcrop_type":"reflection","test_time":14.469398021698,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 22 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.4844588926205,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1.95,"init_value":10,"train_acc":58.579727564103,"widen_factor":8,"imageSize":32,"train_time":212.1688439846,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":22,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.4844588926205,"randomcrop_type":"reflection","test_time":18.42075419426,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 23 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.4546610107789,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":45.19,"init_value":10,"train_acc":59.104567307692,"widen_factor":8,"imageSize":32,"train_time":218.42704319954,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":23,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.4546610107789,"randomcrop_type":"reflection","test_time":18.964320898056,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 24 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.4527033836414,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":2.39,"init_value":10,"train_acc":59.298878205128,"widen_factor":8,"imageSize":32,"train_time":220.0227329731,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":24,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.4527033836414,"randomcrop_type":"reflection","test_time":19.344465017319,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 25 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.5068820238113,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":53.18,"init_value":10,"train_acc":57.920673076923,"widen_factor":8,"imageSize":32,"train_time":219.34481191635,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":25,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.5068820238113,"randomcrop_type":"reflection","test_time":19.223701953888,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 26 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.4506629152176,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":54.38,"init_value":10,"train_acc":59.362980769231,"widen_factor":8,"imageSize":32,"train_time":217.18410682678,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":26,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.4506629152176,"randomcrop_type":"reflection","test_time":19.026578903198,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 27 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.420356286489,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":49.76,"init_value":10,"train_acc":59.891826923077,"widen_factor":8,"imageSize":32,"train_time":220.92724704742,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":27,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.420356286489,"randomcrop_type":"reflection","test_time":19.675302028656,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 28 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.40036417307,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":43.76,"init_value":10,"train_acc":60.512820512821,"widen_factor":8,"imageSize":32,"train_time":218.74225878716,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":28,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.40036417307,"randomcrop_type":"reflection","test_time":18.582298994064,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 29 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.3683871975312,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":51.42,"init_value":10,"train_acc":61.460336538462,"widen_factor":8,"imageSize":32,"train_time":220.62070989609,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":29,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.3683871975312,"randomcrop_type":"reflection","test_time":19.118014097214,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 30 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.3560905931852,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":38.97,"init_value":10,"train_acc":61.666666666667,"widen_factor":8,"imageSize":32,"train_time":221.67243385315,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":30,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.3560905931852,"randomcrop_type":"reflection","test_time":19.305763959885,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 31 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.3404052278934,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":51.24,"init_value":10,"train_acc":61.963141025641,"widen_factor":8,"imageSize":32,"train_time":219.52244901657,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":31,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.3404052278934,"randomcrop_type":"reflection","test_time":19.291641950607,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 32 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.3288685627473,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":51.08,"init_value":10,"train_acc":62.281650641026,"widen_factor":8,"imageSize":32,"train_time":214.04892396927,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":32,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.3288685627473,"randomcrop_type":"reflection","test_time":17.56938791275,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 33 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.3171005438536,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":50.4,"init_value":10,"train_acc":62.526041666667,"widen_factor":8,"imageSize":32,"train_time":216.178992033,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":33,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.3171005438536,"randomcrop_type":"reflection","test_time":18.047358036041,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 34 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.3110045058605,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":42.32,"init_value":10,"train_acc":62.840544871795,"widen_factor":8,"imageSize":32,"train_time":220.83705401421,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":34,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.3110045058605,"randomcrop_type":"reflection","test_time":19.29834985733,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 35 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.3017184667098,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":53.99,"init_value":10,"train_acc":62.908653846154,"widen_factor":8,"imageSize":32,"train_time":220.15636610985,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":35,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.3017184667098,"randomcrop_type":"reflection","test_time":18.261277914047,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 36 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.2979649824974,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":24.12,"init_value":10,"train_acc":63.137019230769,"widen_factor":8,"imageSize":32,"train_time":221.4855120182,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":36,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.2979649824974,"randomcrop_type":"reflection","test_time":18.893817901611,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 37 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.2902666394527,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":31.34,"init_value":10,"train_acc":63.179086538462,"widen_factor":8,"imageSize":32,"train_time":218.59967017174,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":37,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.2902666394527,"randomcrop_type":"reflection","test_time":17.92845916748,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 38 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.2805616485767,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":23.3,"init_value":10,"train_acc":63.665865384615,"widen_factor":8,"imageSize":32,"train_time":217.81544613838,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":38,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.2805616485767,"randomcrop_type":"reflection","test_time":18.987421989441,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 39 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.2706790884336,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":35.47,"init_value":10,"train_acc":63.812099358974,"widen_factor":8,"imageSize":32,"train_time":220.45473194122,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":39,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.2706790884336,"randomcrop_type":"reflection","test_time":19.676640033722,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 40 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.2753828744094,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":24.78,"init_value":10,"train_acc":63.695913461538,"widen_factor":8,"imageSize":32,"train_time":219.10293984413,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":40,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.2753828744094,"randomcrop_type":"reflection","test_time":18.328801870346,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 41 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.2739576750841,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":3.02,"init_value":10,"train_acc":63.541666666667,"widen_factor":8,"imageSize":32,"train_time":218.5922729969,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":41,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.2739576750841,"randomcrop_type":"reflection","test_time":19.700809001923,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 42 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.2639348045374,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":2.33,"init_value":10,"train_acc":63.739983974359,"widen_factor":8,"imageSize":32,"train_time":220.16222810745,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":42,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.2639348045374,"randomcrop_type":"reflection","test_time":18.850793123245,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 43 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.2595607152352,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":4.28,"init_value":10,"train_acc":64.180689102564,"widen_factor":8,"imageSize":32,"train_time":224.58739590645,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":43,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.2595607152352,"randomcrop_type":"reflection","test_time":18.927488088608,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 44 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.2598867420967,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1.09,"init_value":10,"train_acc":64.012419871795,"widen_factor":8,"imageSize":32,"train_time":226.37656092644,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":44,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.2598867420967,"randomcrop_type":"reflection","test_time":18.796798944473,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 45 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.2478220386383,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1.12,"init_value":10,"train_acc":64.451121794872,"widen_factor":8,"imageSize":32,"train_time":224.19214105606,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":45,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.2478220386383,"randomcrop_type":"reflection","test_time":18.740423202515,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 46 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.2526733907369,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":64.21875,"widen_factor":8,"imageSize":32,"train_time":221.60043406487,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":46,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.2526733907369,"randomcrop_type":"reflection","test_time":18.577445983887,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 47 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.2586305196469,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":64.21875,"widen_factor":8,"imageSize":32,"train_time":224.93516993523,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":47,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.2586305196469,"randomcrop_type":"reflection","test_time":19.794605970383,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 48 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.2545267646129,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":64.264823717949,"widen_factor":8,"imageSize":32,"train_time":222.97022199631,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":48,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.2545267646129,"randomcrop_type":"reflection","test_time":18.948025941849,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 49 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.349455109315,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":62.251602564103,"widen_factor":8,"imageSize":32,"train_time":217.27855587006,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":49,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.349455109315,"randomcrop_type":"reflection","test_time":18.782486915588,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 50 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.9619739575264,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1.05,"init_value":10,"train_acc":47.612179487179,"widen_factor":8,"imageSize":32,"train_time":222.03288292885,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":50,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.9619739575264,"randomcrop_type":"reflection","test_time":19.468524217606,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 51 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.7816833648926,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":51.879006410256,"widen_factor":8,"imageSize":32,"train_time":220.19213008881,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":51,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.7816833648926,"randomcrop_type":"reflection","test_time":17.374632835388,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 52 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.7349024846004,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":52.878605769231,"widen_factor":8,"imageSize":32,"train_time":219.22103500366,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":52,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.7349024846004,"randomcrop_type":"reflection","test_time":18.933883905411,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 53 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.724168017583,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":52.978766025641,"widen_factor":8,"imageSize":32,"train_time":220.397149086,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":53,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.724168017583,"randomcrop_type":"reflection","test_time":18.594524860382,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 54 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.7083077656917,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":53.59375,"widen_factor":8,"imageSize":32,"train_time":223.68674492836,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":54,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.7083077656917,"randomcrop_type":"reflection","test_time":18.829023838043,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 55 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.6930870245665,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":54.000400641026,"widen_factor":8,"imageSize":32,"train_time":222.02919507027,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":55,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.6930870245665,"randomcrop_type":"reflection","test_time":17.393092155457,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 56 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":1.9625410951101,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":49.635416666667,"widen_factor":8,"imageSize":32,"train_time":219.55279588699,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":56,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":1.9625410951101,"randomcrop_type":"reflection","test_time":18.241002082825,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 57 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6468248086098,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.96554487179488,"widen_factor":8,"imageSize":32,"train_time":219.65642094612,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":57,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":4.6468248086098,"randomcrop_type":"reflection","test_time":19.026179075241,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 58 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6136070593809,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.96754807692308,"widen_factor":8,"imageSize":32,"train_time":218.30025601387,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":58,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":4.6136070593809,"randomcrop_type":"reflection","test_time":18.594364881516,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 59 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6099304724962,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.89543269230769,"widen_factor":8,"imageSize":32,"train_time":219.48512792587,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":59,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.1,"learningRate":0.1,"generate_graph":false,"train_loss":4.6099304724962,"randomcrop_type":"reflection","test_time":17.914535045624,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 60 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6069149506398,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.98958333333333,"widen_factor":8,"imageSize":32,"train_time":219.46431803703,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":60,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6069149506398,"randomcrop_type":"reflection","test_time":19.292406082153,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 61 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6062185605367,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.83934294871794,"widen_factor":8,"imageSize":32,"train_time":216.32716107368,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":61,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6062185605367,"randomcrop_type":"reflection","test_time":19.274376153946,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 62 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6062097965143,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.87139423076923,"widen_factor":8,"imageSize":32,"train_time":216.95465397835,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":62,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6062097965143,"randomcrop_type":"reflection","test_time":19.723161935806,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 63 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6061457572839,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.9395032051282,"widen_factor":8,"imageSize":32,"train_time":223.60871005058,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":63,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6061457572839,"randomcrop_type":"reflection","test_time":19.258562088013,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 64 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.606063363491,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.87139423076923,"widen_factor":8,"imageSize":32,"train_time":219.25005197525,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":64,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.606063363491,"randomcrop_type":"reflection","test_time":19.102022171021,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 65 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6060644296499,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.87940705128206,"widen_factor":8,"imageSize":32,"train_time":223.34458112717,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":65,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6060644296499,"randomcrop_type":"reflection","test_time":19.262331962585,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 66 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6060684546446,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.85136217948718,"widen_factor":8,"imageSize":32,"train_time":224.10431694984,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":66,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6060684546446,"randomcrop_type":"reflection","test_time":19.593862056732,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 67 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6060458440047,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.91145833333333,"widen_factor":8,"imageSize":32,"train_time":220.4967250824,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":67,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6060458440047,"randomcrop_type":"reflection","test_time":19.197246074677,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 68 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6060597994389,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.8974358974359,"widen_factor":8,"imageSize":32,"train_time":221.3370141983,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":68,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6060597994389,"randomcrop_type":"reflection","test_time":18.415552854538,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 69 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6059951085311,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.81530448717949,"widen_factor":8,"imageSize":32,"train_time":221.44877696037,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":69,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6059951085311,"randomcrop_type":"reflection","test_time":19.149124145508,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 70 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6060277743217,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.79527243589743,"widen_factor":8,"imageSize":32,"train_time":220.42225003242,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":70,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6060277743217,"randomcrop_type":"reflection","test_time":19.241465091705,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 71 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6060039018973,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.86538461538461,"widen_factor":8,"imageSize":32,"train_time":221.24984788895,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":71,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6060039018973,"randomcrop_type":"reflection","test_time":19.524187088013,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 72 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6059895393176,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.84334935897436,"widen_factor":8,"imageSize":32,"train_time":219.67922210693,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":72,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6059895393176,"randomcrop_type":"reflection","test_time":18.835665941238,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 73 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6059740714538,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.90544871794872,"widen_factor":8,"imageSize":32,"train_time":222.25031995773,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":73,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6059740714538,"randomcrop_type":"reflection","test_time":18.872276067734,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 74 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6059668345329,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.86538461538461,"widen_factor":8,"imageSize":32,"train_time":224.11567378044,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":74,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6059668345329,"randomcrop_type":"reflection","test_time":19.184977054596,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 75 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6059593628614,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.90344551282051,"widen_factor":8,"imageSize":32,"train_time":221.0895550251,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":75,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6059593628614,"randomcrop_type":"reflection","test_time":19.664945840836,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 76 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6059107756003,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.86538461538461,"widen_factor":8,"imageSize":32,"train_time":221.88010978699,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":76,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6059107756003,"randomcrop_type":"reflection","test_time":19.419691085815,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 77 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6059354867691,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.83333333333333,"widen_factor":8,"imageSize":32,"train_time":219.29470801353,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":77,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6059354867691,"randomcrop_type":"reflection","test_time":18.323456048965,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 78 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6059404312036,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.79727564102564,"widen_factor":8,"imageSize":32,"train_time":221.13024616241,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":78,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6059404312036,"randomcrop_type":"reflection","test_time":18.582205057144,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 79 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6059103990212,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.88541666666667,"widen_factor":8,"imageSize":32,"train_time":220.9807369709,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":79,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6059103990212,"randomcrop_type":"reflection","test_time":19.079391002655,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 80 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.605915870422,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.90144230769231,"widen_factor":8,"imageSize":32,"train_time":219.34929013252,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":80,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.605915870422,"randomcrop_type":"reflection","test_time":19.325531005859,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 81 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6059108526279,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.91346153846153,"widen_factor":8,"imageSize":32,"train_time":220.67702889442,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":81,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6059108526279,"randomcrop_type":"reflection","test_time":19.019920110703,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 82 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6059021803049,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.90945512820512,"widen_factor":8,"imageSize":32,"train_time":221.0409090519,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":82,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6059021803049,"randomcrop_type":"reflection","test_time":18.199793100357,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 83 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058718045553,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.91746794871794,"widen_factor":8,"imageSize":32,"train_time":220.10571503639,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":83,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058718045553,"randomcrop_type":"reflection","test_time":18.695710897446,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 84 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058955486004,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.88541666666667,"widen_factor":8,"imageSize":32,"train_time":219.21173882484,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":84,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058955486004,"randomcrop_type":"reflection","test_time":17.956976890564,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 85 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.60589775061,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.91746794871794,"widen_factor":8,"imageSize":32,"train_time":220.06813788414,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":85,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.60589775061,"randomcrop_type":"reflection","test_time":19.142304897308,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 86 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058768394666,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.78525641025641,"widen_factor":8,"imageSize":32,"train_time":220.18609499931,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":86,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058768394666,"randomcrop_type":"reflection","test_time":19.330319881439,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 87 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058689251924,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.89342948717949,"widen_factor":8,"imageSize":32,"train_time":223.31090497971,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":87,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058689251924,"randomcrop_type":"reflection","test_time":18.741984128952,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 88 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058923574594,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.88741987179488,"widen_factor":8,"imageSize":32,"train_time":219.4883749485,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":88,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058923574594,"randomcrop_type":"reflection","test_time":18.296747207642,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 89 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058830444629,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.9354967948718,"widen_factor":8,"imageSize":32,"train_time":220.67399406433,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":89,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058830444629,"randomcrop_type":"reflection","test_time":19.085785150528,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 90 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058703043522,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.87940705128206,"widen_factor":8,"imageSize":32,"train_time":219.83248114586,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":90,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058703043522,"randomcrop_type":"reflection","test_time":18.845668077469,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 91 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058716969612,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.91746794871794,"widen_factor":8,"imageSize":32,"train_time":218.6234459877,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":91,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058716969612,"randomcrop_type":"reflection","test_time":19.303200006485,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 92 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058434596429,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.90144230769231,"widen_factor":8,"imageSize":32,"train_time":220.63430190086,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":92,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058434596429,"randomcrop_type":"reflection","test_time":17.128215074539,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 93 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058693347833,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.92347756410257,"widen_factor":8,"imageSize":32,"train_time":219.60362482071,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":93,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058693347833,"randomcrop_type":"reflection","test_time":18.750077962875,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 94 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058372497559,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.90144230769231,"widen_factor":8,"imageSize":32,"train_time":219.59630489349,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":94,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058372497559,"randomcrop_type":"reflection","test_time":18.750995874405,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 95 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058338849972,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.90144230769231,"widen_factor":8,"imageSize":32,"train_time":219.85140895844,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":95,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058338849972,"randomcrop_type":"reflection","test_time":19.053951978683,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 96 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058491963607,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.8613782051282,"widen_factor":8,"imageSize":32,"train_time":217.40973305702,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":96,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058491963607,"randomcrop_type":"reflection","test_time":19.328962087631,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 97 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058274880434,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.84935897435898,"widen_factor":8,"imageSize":32,"train_time":219.9141740799,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":97,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058274880434,"randomcrop_type":"reflection","test_time":18.79035615921,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 98 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058361909328,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.88341346153847,"widen_factor":8,"imageSize":32,"train_time":219.15197515488,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":98,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058361909328,"randomcrop_type":"reflection","test_time":17.788372039795,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 99 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058552093995,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.84935897435898,"widen_factor":8,"imageSize":32,"train_time":219.19437503815,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":99,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058552093995,"randomcrop_type":"reflection","test_time":19.362628936768,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 100 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058404665727,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.95753205128206,"widen_factor":8,"imageSize":32,"train_time":219.44717693329,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":100,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058404665727,"randomcrop_type":"reflection","test_time":18.845817089081,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 101 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058014282813,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.87940705128206,"widen_factor":8,"imageSize":32,"train_time":216.93873405457,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":101,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058014282813,"randomcrop_type":"reflection","test_time":19.006316900253,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 102 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058310875526,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.83733974358974,"widen_factor":8,"imageSize":32,"train_time":216.50357604027,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":102,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058310875526,"randomcrop_type":"reflection","test_time":19.014063119888,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 103 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058380505978,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.91546474358974,"widen_factor":8,"imageSize":32,"train_time":217.92750287056,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":103,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058380505978,"randomcrop_type":"reflection","test_time":18.733533143997,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 104 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058592759646,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.86939102564102,"widen_factor":8,"imageSize":32,"train_time":217.99421095848,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":104,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058592759646,"randomcrop_type":"reflection","test_time":18.960018873215,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 105 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058283182291,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.84535256410257,"widen_factor":8,"imageSize":32,"train_time":218.56617712975,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":105,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058283182291,"randomcrop_type":"reflection","test_time":18.999288082123,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 106 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058360943427,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.89342948717949,"widen_factor":8,"imageSize":32,"train_time":222.17786693573,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":106,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058360943427,"randomcrop_type":"reflection","test_time":17.975780010223,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 107 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058356297322,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.8994391025641,"widen_factor":8,"imageSize":32,"train_time":220.70617294312,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":107,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058356297322,"randomcrop_type":"reflection","test_time":18.95854306221,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 108 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058394505427,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.90144230769231,"widen_factor":8,"imageSize":32,"train_time":219.83940196037,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":108,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058394505427,"randomcrop_type":"reflection","test_time":19.174497842789,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 109 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058271860465,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.88741987179488,"widen_factor":8,"imageSize":32,"train_time":218.77880501747,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":109,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058271860465,"randomcrop_type":"reflection","test_time":18.245622158051,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 110 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.605828674023,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.85136217948718,"widen_factor":8,"imageSize":32,"train_time":221.80072617531,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":110,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.605828674023,"randomcrop_type":"reflection","test_time":18.791996955872,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 111 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058250427246,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.84735576923077,"widen_factor":8,"imageSize":32,"train_time":222.42419195175,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":111,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058250427246,"randomcrop_type":"reflection","test_time":19.499204158783,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 112 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058337957431,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.79527243589743,"widen_factor":8,"imageSize":32,"train_time":221.5990459919,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":112,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058337957431,"randomcrop_type":"reflection","test_time":18.880095005035,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 113 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058305911529,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.90544871794872,"widen_factor":8,"imageSize":32,"train_time":222.82621121407,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":113,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058305911529,"randomcrop_type":"reflection","test_time":19.812188148499,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 114 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058483368311,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.86738782051282,"widen_factor":8,"imageSize":32,"train_time":223.01290297508,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":114,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058483368311,"randomcrop_type":"reflection","test_time":18.963278770447,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 115 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058410106561,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.84735576923077,"widen_factor":8,"imageSize":32,"train_time":221.73462605476,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":115,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058410106561,"randomcrop_type":"reflection","test_time":17.924392938614,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 116 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058497184362,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.86738782051282,"widen_factor":8,"imageSize":32,"train_time":219.99743103981,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":116,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058497184362,"randomcrop_type":"reflection","test_time":18.528723955154,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 117 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058334619571,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.91546474358974,"widen_factor":8,"imageSize":32,"train_time":215.89021015167,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":117,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058334619571,"randomcrop_type":"reflection","test_time":18.614919900894,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 118 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058397928874,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.94751602564102,"widen_factor":8,"imageSize":32,"train_time":218.76310586929,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":118,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058397928874,"randomcrop_type":"reflection","test_time":19.433471918106,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 119 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6058283597995,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.91746794871794,"widen_factor":8,"imageSize":32,"train_time":220.1499478817,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":119,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.02,"learningRate":0.02,"generate_graph":false,"train_loss":4.6058283597995,"randomcrop_type":"reflection","test_time":19.360804080963,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 120 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.605334067956,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.88741987179488,"widen_factor":8,"imageSize":32,"train_time":219.86244106293,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":120,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.605334067956,"randomcrop_type":"reflection","test_time":18.583979845047,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 121 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053296174759,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.91145833333333,"widen_factor":8,"imageSize":32,"train_time":220.06221103668,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":121,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053296174759,"randomcrop_type":"reflection","test_time":18.592117071152,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 122 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053270657857,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.88341346153847,"widen_factor":8,"imageSize":32,"train_time":220.293653965,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":122,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053270657857,"randomcrop_type":"reflection","test_time":18.853590011597,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 123 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053224636958,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.91746794871794,"widen_factor":8,"imageSize":32,"train_time":220.63299512863,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":123,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053224636958,"randomcrop_type":"reflection","test_time":19.294848918915,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 124 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053148954343,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.94350961538461,"widen_factor":8,"imageSize":32,"train_time":220.72182416916,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":124,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053148954343,"randomcrop_type":"reflection","test_time":17.764225006104,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 125 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053210123991,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.91546474358974,"widen_factor":8,"imageSize":32,"train_time":221.25997495651,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":125,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053210123991,"randomcrop_type":"reflection","test_time":19.406827926636,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 126 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053199401269,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.859375,"widen_factor":8,"imageSize":32,"train_time":220.43334317207,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":126,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053199401269,"randomcrop_type":"reflection","test_time":18.931322097778,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 127 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053149211101,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.96955128205128,"widen_factor":8,"imageSize":32,"train_time":219.970277071,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":127,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053149211101,"randomcrop_type":"reflection","test_time":17.159781932831,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 128 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053212862748,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.90544871794872,"widen_factor":8,"imageSize":32,"train_time":220.87404108047,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":128,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053212862748,"randomcrop_type":"reflection","test_time":18.88649392128,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 129 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053190219097,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.82331730769231,"widen_factor":8,"imageSize":32,"train_time":220.53249621391,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":129,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053190219097,"randomcrop_type":"reflection","test_time":19.007387161255,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 130 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053130137615,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.86538461538461,"widen_factor":8,"imageSize":32,"train_time":222.11094093323,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":130,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053130137615,"randomcrop_type":"reflection","test_time":17.934117794037,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 131 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053128462571,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.90344551282051,"widen_factor":8,"imageSize":32,"train_time":220.22328901291,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":131,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053128462571,"randomcrop_type":"reflection","test_time":17.557207107544,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 132 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053106136811,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.83934294871794,"widen_factor":8,"imageSize":32,"train_time":219.28965592384,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":132,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053106136811,"randomcrop_type":"reflection","test_time":18.639894008636,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 133 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053141117096,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.85336538461539,"widen_factor":8,"imageSize":32,"train_time":219.93040704727,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":133,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053141117096,"randomcrop_type":"reflection","test_time":18.578532934189,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 134 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053119317079,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.81530448717949,"widen_factor":8,"imageSize":32,"train_time":221.39123797417,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":134,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053119317079,"randomcrop_type":"reflection","test_time":18.533619880676,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 135 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053164347624,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.88942307692308,"widen_factor":8,"imageSize":32,"train_time":217.54001998901,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":135,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053164347624,"randomcrop_type":"reflection","test_time":18.740653038025,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 136 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053147254846,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.79126602564102,"widen_factor":8,"imageSize":32,"train_time":222.86321496964,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":136,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053147254846,"randomcrop_type":"reflection","test_time":19.107830047607,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 137 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053179398561,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.89342948717949,"widen_factor":8,"imageSize":32,"train_time":222.47375607491,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":137,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053179398561,"randomcrop_type":"reflection","test_time":18.643181085587,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 138 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053105195363,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.81330128205128,"widen_factor":8,"imageSize":32,"train_time":220.04781985283,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":138,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053105195363,"randomcrop_type":"reflection","test_time":19.668442964554,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 139 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053093946897,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.94150641025641,"widen_factor":8,"imageSize":32,"train_time":221.14219498634,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":139,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053093946897,"randomcrop_type":"reflection","test_time":18.840911865234,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 140 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053145005153,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.82532051282051,"widen_factor":8,"imageSize":32,"train_time":222.45084500313,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":140,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053145005153,"randomcrop_type":"reflection","test_time":19.412703037262,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 141 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053145274138,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.82532051282051,"widen_factor":8,"imageSize":32,"train_time":218.40127396584,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":141,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053145274138,"randomcrop_type":"reflection","test_time":18.948752880096,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 142 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053174691323,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.92948717948718,"widen_factor":8,"imageSize":32,"train_time":223.41715407372,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":142,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053174691323,"randomcrop_type":"reflection","test_time":19.150629997253,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 143 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053170937758,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.82532051282051,"widen_factor":8,"imageSize":32,"train_time":221.08936309814,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":143,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053170937758,"randomcrop_type":"reflection","test_time":19.671466112137,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 144 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053180755713,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.80528846153847,"widen_factor":8,"imageSize":32,"train_time":222.88130903244,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":144,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053180755713,"randomcrop_type":"reflection","test_time":18.559180021286,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 145 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053081133427,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.85336538461539,"widen_factor":8,"imageSize":32,"train_time":222.48149108887,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":145,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053081133427,"randomcrop_type":"reflection","test_time":19.062139987946,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 146 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053193251292,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.83733974358974,"widen_factor":8,"imageSize":32,"train_time":222.78297805786,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":146,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053193251292,"randomcrop_type":"reflection","test_time":19.146497011185,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 147 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.60531315559,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.86939102564102,"widen_factor":8,"imageSize":32,"train_time":221.72370290756,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":147,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.60531315559,"randomcrop_type":"reflection","test_time":18.392289876938,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 148 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053172013698,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.82331730769231,"widen_factor":8,"imageSize":32,"train_time":221.02490091324,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":148,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053172013698,"randomcrop_type":"reflection","test_time":19.550419092178,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 149 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053193691449,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.87540064102564,"widen_factor":8,"imageSize":32,"train_time":222.70167803764,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":149,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053193691449,"randomcrop_type":"reflection","test_time":18.772521972656,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 150 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053169323848,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.87740384615384,"widen_factor":8,"imageSize":32,"train_time":222.98625898361,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":150,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053169323848,"randomcrop_type":"reflection","test_time":18.599006891251,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 151 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053173052959,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.86338141025641,"widen_factor":8,"imageSize":32,"train_time":222.79928088188,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":151,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053173052959,"randomcrop_type":"reflection","test_time":18.270826101303,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 152 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053163724068,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.82932692307692,"widen_factor":8,"imageSize":32,"train_time":220.88752603531,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":152,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053163724068,"randomcrop_type":"reflection","test_time":19.427941083908,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 153 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053214525565,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.87540064102564,"widen_factor":8,"imageSize":32,"train_time":221.84468817711,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":153,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053214525565,"randomcrop_type":"reflection","test_time":19.012695789337,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 154 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053122312595,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.8974358974359,"widen_factor":8,"imageSize":32,"train_time":221.20381903648,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":154,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053122312595,"randomcrop_type":"reflection","test_time":18.2605240345,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 155 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053140053382,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.84134615384616,"widen_factor":8,"imageSize":32,"train_time":223.02315592766,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":155,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053140053382,"randomcrop_type":"reflection","test_time":17.373262882233,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 156 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053168602479,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.83934294871794,"widen_factor":8,"imageSize":32,"train_time":223.01871013641,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":156,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053168602479,"randomcrop_type":"reflection","test_time":19.046118021011,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 157 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053142449795,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.78125,"widen_factor":8,"imageSize":32,"train_time":224.47520303726,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":157,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053142449795,"randomcrop_type":"reflection","test_time":19.110336065292,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 158 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6053187773778,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.88341346153847,"widen_factor":8,"imageSize":32,"train_time":221.52909803391,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":158,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.6053187773778,"randomcrop_type":"reflection","test_time":18.723400115967,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 159 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.60531269587,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.87540064102564,"widen_factor":8,"imageSize":32,"train_time":222.54888892174,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":159,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.004,"learningRate":0.004,"generate_graph":false,"train_loss":4.60531269587,"randomcrop_type":"reflection","test_time":18.55831694603,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 160 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051994543809,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.90144230769231,"widen_factor":8,"imageSize":32,"train_time":220.3281109333,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":160,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051994543809,"randomcrop_type":"reflection","test_time":19.230374097824,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 161 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051995314085,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.8974358974359,"widen_factor":8,"imageSize":32,"train_time":222.95503497124,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":161,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051995314085,"randomcrop_type":"reflection","test_time":18.820468902588,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 162 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051999336634,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.91546474358974,"widen_factor":8,"imageSize":32,"train_time":221.64758300781,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":162,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051999336634,"randomcrop_type":"reflection","test_time":19.733237028122,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 163 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051994311504,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.91746794871794,"widen_factor":8,"imageSize":32,"train_time":224.04743385315,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":163,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051994311504,"randomcrop_type":"reflection","test_time":18.827203989029,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 164 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051998517452,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.90344551282051,"widen_factor":8,"imageSize":32,"train_time":224.19536495209,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":164,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051998517452,"randomcrop_type":"reflection","test_time":19.133887052536,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 165 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6052000339215,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.96754807692308,"widen_factor":8,"imageSize":32,"train_time":225.41856813431,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":165,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6052000339215,"randomcrop_type":"reflection","test_time":19.587280988693,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 166 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051999189915,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.88541666666667,"widen_factor":8,"imageSize":32,"train_time":221.71940517426,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":166,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051999189915,"randomcrop_type":"reflection","test_time":19.124953985214,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 167 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6052001574101,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.90144230769231,"widen_factor":8,"imageSize":32,"train_time":221.05219697952,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":167,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6052001574101,"randomcrop_type":"reflection","test_time":18.752407073975,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 168 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051994812794,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.87940705128206,"widen_factor":8,"imageSize":32,"train_time":221.82153487206,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":168,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051994812794,"randomcrop_type":"reflection","test_time":18.95462012291,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 169 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6052000339215,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.90544871794872,"widen_factor":8,"imageSize":32,"train_time":223.90972995758,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":169,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6052000339215,"randomcrop_type":"reflection","test_time":19.002184152603,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 170 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6052007332826,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.93349358974359,"widen_factor":8,"imageSize":32,"train_time":223.09727692604,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":170,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6052007332826,"randomcrop_type":"reflection","test_time":17.725956916809,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 171 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.605199996019,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.88942307692308,"widen_factor":8,"imageSize":32,"train_time":222.46959996223,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":171,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.605199996019,"randomcrop_type":"reflection","test_time":19.612823963165,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 172 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051999825698,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.86939102564102,"widen_factor":8,"imageSize":32,"train_time":224.5998711586,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":172,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051999825698,"randomcrop_type":"reflection","test_time":19.450610876083,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 173 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051995962094,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.91947115384616,"widen_factor":8,"imageSize":32,"train_time":224.05346488953,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":173,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051995962094,"randomcrop_type":"reflection","test_time":19.087707042694,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 174 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.605199385912,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.84334935897436,"widen_factor":8,"imageSize":32,"train_time":222.44007778168,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":174,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.605199385912,"randomcrop_type":"reflection","test_time":17.949426174164,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 175 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.605199773495,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.94551282051282,"widen_factor":8,"imageSize":32,"train_time":222.58224582672,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":175,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.605199773495,"randomcrop_type":"reflection","test_time":19.023216962814,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 176 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051999874604,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.89543269230769,"widen_factor":8,"imageSize":32,"train_time":222.41098093987,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":176,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051999874604,"randomcrop_type":"reflection","test_time":18.589883089066,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 177 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051991120363,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.93149038461539,"widen_factor":8,"imageSize":32,"train_time":220.09702014923,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":177,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051991120363,"randomcrop_type":"reflection","test_time":18.728572130203,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 178 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051995729789,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.95953525641026,"widen_factor":8,"imageSize":32,"train_time":222.45091700554,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":178,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051995729789,"randomcrop_type":"reflection","test_time":19.017457962036,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 179 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051997539325,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.8613782051282,"widen_factor":8,"imageSize":32,"train_time":219.53513908386,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":179,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051997539325,"randomcrop_type":"reflection","test_time":19.156153917313,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 180 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6052005217626,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.96354166666667,"widen_factor":8,"imageSize":32,"train_time":219.03033685684,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":180,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6052005217626,"randomcrop_type":"reflection","test_time":19.161046981812,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 181 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.605198664543,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.98758012820512,"widen_factor":8,"imageSize":32,"train_time":221.25133800507,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":181,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.605198664543,"randomcrop_type":"reflection","test_time":18.859185218811,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 182 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051994213691,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.93149038461539,"widen_factor":8,"imageSize":32,"train_time":221.09147310257,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":182,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051994213691,"randomcrop_type":"reflection","test_time":18.410573959351,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 183 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051998700851,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.85136217948718,"widen_factor":8,"imageSize":32,"train_time":220.63013577461,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":183,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051998700851,"randomcrop_type":"reflection","test_time":19.291591882706,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 184 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6052001366249,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.86538461538461,"widen_factor":8,"imageSize":32,"train_time":221.68033313751,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":184,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6052001366249,"randomcrop_type":"reflection","test_time":19.236270189285,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 185 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051997918349,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.88942307692308,"widen_factor":8,"imageSize":32,"train_time":221.94447398186,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":185,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051997918349,"randomcrop_type":"reflection","test_time":20.080812931061,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 186 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051997099167,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.84735576923077,"widen_factor":8,"imageSize":32,"train_time":221.90259814262,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":186,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051997099167,"randomcrop_type":"reflection","test_time":16.59658908844,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 187 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051993541228,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.92147435897436,"widen_factor":8,"imageSize":32,"train_time":221.39525413513,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":187,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051993541228,"randomcrop_type":"reflection","test_time":19.214140176773,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 188 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051999556713,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.8573717948718,"widen_factor":8,"imageSize":32,"train_time":220.76302194595,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":188,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051999556713,"randomcrop_type":"reflection","test_time":18.963062047958,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 189 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051998187334,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.82532051282051,"widen_factor":8,"imageSize":32,"train_time":221.1125330925,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":189,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051998187334,"randomcrop_type":"reflection","test_time":18.798822879791,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 190 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051996279985,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.859375,"widen_factor":8,"imageSize":32,"train_time":224.00853896141,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":190,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051996279985,"randomcrop_type":"reflection","test_time":18.867722988129,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 191 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6052004496257,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.84535256410257,"widen_factor":8,"imageSize":32,"train_time":223.58900904655,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":191,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6052004496257,"randomcrop_type":"reflection","test_time":18.754690885544,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 192 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6052006256886,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.91947115384616,"widen_factor":8,"imageSize":32,"train_time":223.2882270813,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":192,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6052006256886,"randomcrop_type":"reflection","test_time":18.580250024796,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 193 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051993724627,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.87339743589743,"widen_factor":8,"imageSize":32,"train_time":222.07439517975,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":193,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051993724627,"randomcrop_type":"reflection","test_time":18.867327928543,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 194 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051994812794,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.94350961538461,"widen_factor":8,"imageSize":32,"train_time":222.37723684311,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":194,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051994812794,"randomcrop_type":"reflection","test_time":19.624786138535,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 195 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6051986339765,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.89342948717949,"widen_factor":8,"imageSize":32,"train_time":221.345307827,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":195,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6051986339765,"randomcrop_type":"reflection","test_time":19.61266207695,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 196 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.60519971603,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.83333333333333,"widen_factor":8,"imageSize":32,"train_time":222.50128793716,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":196,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.60519971603,"randomcrop_type":"reflection","test_time":17.789661169052,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 197 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6052011269789,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.92147435897436,"widen_factor":8,"imageSize":32,"train_time":223.5137629509,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":197,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6052011269789,"randomcrop_type":"reflection","test_time":19.165657997131,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 198 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.605199550971,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.84935897435898,"widen_factor":8,"imageSize":32,"train_time":224.69382882118,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":198,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.605199550971,"randomcrop_type":"reflection","test_time":19.002089977264,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 199 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6052002576681,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.82331730769231,"widen_factor":8,"imageSize":32,"train_time":221.26396679878,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":199,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6052002576681,"randomcrop_type":"reflection","test_time":19.78578209877,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
==> online epoch # 200 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"loss":4.6052005278759,"randomcrop":4,"batchSize":128,"data_type":"torch.CudaTensor","model":"resnet-pre-act","nesterov":true,"cudnn_deterministic":false,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar100_whitened.t7","momentum":0.9,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"seed":444,"test_acc":1,"init_value":10,"train_acc":0.88341346153847,"widen_factor":8,"imageSize":32,"train_time":221.3950779438,"save":"logs\/resnet-pre-act_1197027880","dampening":0,"shortcutType":"A","epoch":200,"nGPU":4,"depth":1001,"learningRateDecay":0,"hflip":true,"max_epoch":200,"learningRateDecayRatio":0.2,"lr":0.0008,"learningRate":0.0008,"generate_graph":false,"train_loss":4.6052005278759,"randomcrop_type":"reflection","test_time":18.997140884399,"n_parameters":10350836,"num_classes":100,"epoch_step":[60,120,160]}	
