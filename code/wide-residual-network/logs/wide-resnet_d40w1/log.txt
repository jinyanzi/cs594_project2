{
  optnet_optimize : true
  learningRate : 0.1
  generate_graph : false
  learningRateDecayRatio : 0.2
  init_value : 10
  randomcrop : 4
  widen_factor : 1
  epoch_step : 
    {
      1 : 60
      2 : 120
      3 : 160
    }
  randomcrop_type : "reflection"
  weightDecay : 0.0005
  model : "wide-resnet"
  save : "logs/wide-resnet_3138328195"
  dampening : 0
  cudnn_deterministic : false
  shortcutType : "A"
  nesterov : true
  nGPU : 4
  depth : 40
  max_epoch : 200
  multiply_input_factor : 1
  dataset : "/home/sihong/data/cifar10_whitened.t7"
  deepen_factor : 2
  momentum : 0.9
  optimMethod : "sgd"
  stoDrop : 0
  hflip : true
  imageSize : 32
  dropout : 0
  learningRateDecay : 0
  data_type : "torch.CudaTensor"
  batchSize : 128
}
==> loading data	
==> configuring model	
forward output	{
  1 : FloatTensor - size: 1x10
}
backward output	{
  1 : FloatTensor - size: 1x3x32x32
}
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]
  (1): cudnn.SpatialConvolution(3 -> 16, 3x3, 1,1, 1,1) without bias
  (2): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (5): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (6): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(16 -> 16, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (3): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> output]
          |      (1): cudnn.SpatialConvolution(16 -> 32, 3x3, 2,2, 1,1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.ReLU
          |      (4): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): cudnn.SpatialConvolution(16 -> 32, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (5): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (6): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(32 -> 32, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (4): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
    (1): nn.Sequential {
      [input -> (1) -> (2) -> (3) -> (4) -> output]
      (1): cudnn.SpatialBatchNormalization
      (2): cudnn.ReLU
      (3): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> output]
          |      (1): cudnn.SpatialConvolution(32 -> 64, 3x3, 2,2, 1,1) without bias
          |      (2): cudnn.SpatialBatchNormalization
          |      (3): cudnn.ReLU
          |      (4): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): cudnn.SpatialConvolution(32 -> 64, 1x1, 2,2) without bias
           ... -> output
      }
      (4): nn.CAddTable
    }
    (2): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (3): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (4): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (5): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
    (6): nn.Sequential {
      [input -> (1) -> (2) -> output]
      (1): nn.ConcatTable {
        input
          |`-> (1): nn.Sequential {
          |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
          |      (1): cudnn.SpatialBatchNormalization
          |      (2): cudnn.ReLU
          |      (3): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |      (4): cudnn.SpatialBatchNormalization
          |      (5): cudnn.ReLU
          |      (6): cudnn.SpatialConvolution(64 -> 64, 3x3, 1,1, 1,1) without bias
          |    }
           `-> (2): nn.Identity
           ... -> output
      }
      (2): nn.CAddTable
    }
  }
  (5): cudnn.SpatialBatchNormalization
  (6): cudnn.ReLU
  (7): cudnn.SpatialAveragePooling(8x8, 1,1)
  (8): nn.View(64)
  (9): nn.Linear(64 -> 10)
}
Network has	39	convolutions	
warning: could not load nccl, falling back to default communication	
Will save at logs/wide-resnet_3138328195	
==> online epoch # 1 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"learningRate":0.1,"randomcrop":4,"batchSize":128,"stoDrop":0,"deepen_factor":2,"model":"wide-resnet","nesterov":true,"nGPU":4,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar10_whitened.t7","train_loss":1.5669477811226,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":46.95,"init_value":10,"train_acc":42.28766025641,"widen_factor":1,"epoch_step":[60,120,160],"train_time":11.417482852936,"save":"logs\/wide-resnet_3138328195","dampening":0,"data_type":"torch.CudaTensor","max_epoch":200,"epoch":1,"learningRateDecay":0,"depth":40,"imageSize":32,"hflip":true,"momentum":0.9,"loss":1.5669477811226,"lr":0.1,"cudnn_deterministic":false,"num_classes":10,"generate_graph":false,"randomcrop_type":"reflection","test_time":2.3469939231873,"n_parameters":563930,"shortcutType":"A","learningRateDecayRatio":0.2}	
==> online epoch # 2 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"learningRate":0.1,"randomcrop":4,"batchSize":128,"stoDrop":0,"deepen_factor":2,"model":"wide-resnet","nesterov":true,"nGPU":4,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar10_whitened.t7","train_loss":1.0597161051555,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":60.55,"init_value":10,"train_acc":62.413862179487,"widen_factor":1,"epoch_step":[60,120,160],"train_time":9.4791049957275,"save":"logs\/wide-resnet_3138328195","dampening":0,"data_type":"torch.CudaTensor","max_epoch":200,"epoch":2,"learningRateDecay":0,"depth":40,"imageSize":32,"hflip":true,"momentum":0.9,"loss":1.0597161051555,"lr":0.1,"cudnn_deterministic":false,"num_classes":10,"generate_graph":false,"randomcrop_type":"reflection","test_time":2.3018770217896,"n_parameters":563930,"shortcutType":"A","learningRateDecayRatio":0.2}	
==> online epoch # 3 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"learningRate":0.1,"randomcrop":4,"batchSize":128,"stoDrop":0,"deepen_factor":2,"model":"wide-resnet","nesterov":true,"nGPU":4,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar10_whitened.t7","train_loss":0.87913805460319,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":60.62,"init_value":10,"train_acc":69.136618589744,"widen_factor":1,"epoch_step":[60,120,160],"train_time":10.26527094841,"save":"logs\/wide-resnet_3138328195","dampening":0,"data_type":"torch.CudaTensor","max_epoch":200,"epoch":3,"learningRateDecay":0,"depth":40,"imageSize":32,"hflip":true,"momentum":0.9,"loss":0.87913805460319,"lr":0.1,"cudnn_deterministic":false,"num_classes":10,"generate_graph":false,"randomcrop_type":"reflection","test_time":2.2640969753265,"n_parameters":563930,"shortcutType":"A","learningRateDecayRatio":0.2}	
==> online epoch # 4 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"learningRate":0.1,"randomcrop":4,"batchSize":128,"stoDrop":0,"deepen_factor":2,"model":"wide-resnet","nesterov":true,"nGPU":4,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar10_whitened.t7","train_loss":0.78222546348205,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":70.52,"init_value":10,"train_acc":73.106971153846,"widen_factor":1,"epoch_step":[60,120,160],"train_time":9.8644831180573,"save":"logs\/wide-resnet_3138328195","dampening":0,"data_type":"torch.CudaTensor","max_epoch":200,"epoch":4,"learningRateDecay":0,"depth":40,"imageSize":32,"hflip":true,"momentum":0.9,"loss":0.78222546348205,"lr":0.1,"cudnn_deterministic":false,"num_classes":10,"generate_graph":false,"randomcrop_type":"reflection","test_time":2.216817855835,"n_parameters":563930,"shortcutType":"A","learningRateDecayRatio":0.2}	
==> online epoch # 5 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"learningRate":0.1,"randomcrop":4,"batchSize":128,"stoDrop":0,"deepen_factor":2,"model":"wide-resnet","nesterov":true,"nGPU":4,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar10_whitened.t7","train_loss":0.70805475299175,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":76.33,"init_value":10,"train_acc":75.502804487179,"widen_factor":1,"epoch_step":[60,120,160],"train_time":10.416430950165,"save":"logs\/wide-resnet_3138328195","dampening":0,"data_type":"torch.CudaTensor","max_epoch":200,"epoch":5,"learningRateDecay":0,"depth":40,"imageSize":32,"hflip":true,"momentum":0.9,"loss":0.70805475299175,"lr":0.1,"cudnn_deterministic":false,"num_classes":10,"generate_graph":false,"randomcrop_type":"reflection","test_time":2.2506701946259,"n_parameters":563930,"shortcutType":"A","learningRateDecayRatio":0.2}	
==> online epoch # 6 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"learningRate":0.1,"randomcrop":4,"batchSize":128,"stoDrop":0,"deepen_factor":2,"model":"wide-resnet","nesterov":true,"nGPU":4,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar10_whitened.t7","train_loss":0.6526285445843,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":69.62,"init_value":10,"train_acc":77.670272435897,"widen_factor":1,"epoch_step":[60,120,160],"train_time":9.7795121669769,"save":"logs\/wide-resnet_3138328195","dampening":0,"data_type":"torch.CudaTensor","max_epoch":200,"epoch":6,"learningRateDecay":0,"depth":40,"imageSize":32,"hflip":true,"momentum":0.9,"loss":0.6526285445843,"lr":0.1,"cudnn_deterministic":false,"num_classes":10,"generate_graph":false,"randomcrop_type":"reflection","test_time":2.3236219882965,"n_parameters":563930,"shortcutType":"A","learningRateDecayRatio":0.2}	
==> online epoch # 7 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"learningRate":0.1,"randomcrop":4,"batchSize":128,"stoDrop":0,"deepen_factor":2,"model":"wide-resnet","nesterov":true,"nGPU":4,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar10_whitened.t7","train_loss":0.62368473976086,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":76.02,"init_value":10,"train_acc":78.697916666667,"widen_factor":1,"epoch_step":[60,120,160],"train_time":10.27131986618,"save":"logs\/wide-resnet_3138328195","dampening":0,"data_type":"torch.CudaTensor","max_epoch":200,"epoch":7,"learningRateDecay":0,"depth":40,"imageSize":32,"hflip":true,"momentum":0.9,"loss":0.62368473976086,"lr":0.1,"cudnn_deterministic":false,"num_classes":10,"generate_graph":false,"randomcrop_type":"reflection","test_time":2.2993998527527,"n_parameters":563930,"shortcutType":"A","learningRateDecayRatio":0.2}	
==> online epoch # 8 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"learningRate":0.1,"randomcrop":4,"batchSize":128,"stoDrop":0,"deepen_factor":2,"model":"wide-resnet","nesterov":true,"nGPU":4,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar10_whitened.t7","train_loss":0.6013449549675,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":72.96,"init_value":10,"train_acc":79.47516025641,"widen_factor":1,"epoch_step":[60,120,160],"train_time":10.157650947571,"save":"logs\/wide-resnet_3138328195","dampening":0,"data_type":"torch.CudaTensor","max_epoch":200,"epoch":8,"learningRateDecay":0,"depth":40,"imageSize":32,"hflip":true,"momentum":0.9,"loss":0.6013449549675,"lr":0.1,"cudnn_deterministic":false,"num_classes":10,"generate_graph":false,"randomcrop_type":"reflection","test_time":2.3840219974518,"n_parameters":563930,"shortcutType":"A","learningRateDecayRatio":0.2}	
==> online epoch # 9 [batchSize = 128]	
json_stats: {"optnet_optimize":true,"learningRate":0.1,"randomcrop":4,"batchSize":128,"stoDrop":0,"deepen_factor":2,"model":"wide-resnet","nesterov":true,"nGPU":4,"multiply_input_factor":1,"dataset":"\/home\/sihong\/data\/cifar10_whitened.t7","train_loss":0.58674095601608,"optimMethod":"sgd","dropout":0,"weightDecay":0.0005,"test_acc":75.81,"init_value":10,"train_acc":80.110176282051,"widen_factor":1,"epoch_step":[60,120,160],"train_time":9.9305851459503,"save":"logs\/wide-resnet_3138328195","dampening":0,"data_type":"torch.CudaTensor","max_epoch":200,"epoch":9,"learningRateDecay":0,"depth":40,"imageSize":32,"hflip":true,"momentum":0.9,"loss":0.58674095601608,"lr":0.1,"cudnn_deterministic":false,"num_classes":10,"generate_graph":false,"randomcrop_type":"reflection","test_time":2.4258148670197,"n_parameters":563930,"shortcutType":"A","learningRateDecayRatio":0.2}	
==> online epoch # 10 [batchSize = 128]	
